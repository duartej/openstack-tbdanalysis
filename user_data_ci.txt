#cloud-config

# Install additional packages on first boot. Packages
# needed for ROOT, EUDET and EUTelesecope
#
# Default: none
#
# if packages are specified, this apt_update will be set to true
#
# packages may be supplied as a single package name or as a list
# with the format [<package>, <version>] wherein the specifc
# package version will be installed.
packages:
 - ElectricFence
 - libXpm
 - libXft
 - libicu
 - mesa-libGLU
 - mesa-libGL
 - libXmu
 - git
 - cmake3
 - rng-tools
 - yum-utils
 - device-mapper-persistent-data
 - lvm2

# final_message
# default: cloud-init boot finished at $TIMESTAMP. Up $UPTIME seconds
# this message is written by cloud-final when the system is finished
# its first boot
final_message: "The system is finally up, after $UPTIME seconds"

# --- Create some files: DESY cvmfs software
# Public key for the desy CVMFS. Just in case does not able to access
# to the server
# And other static files for CVMFS and EOS (cms and user)
# And the /root/.k5login file to assure the root access for the maintainer
# Create the needed messag
# Plus an addendum to /etc/profile in order to prepare the session
write_files:
  - path: "/etc/cvmfs/keys/desy.de.pub"
    content: |
        -----BEGIN PUBLIC KEY-----
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3pgrEIimdCPWG9cuhQ0d
        ZWfYxvHRz5hL4HvQlmvikLIlHxs2EApnGyAWdaHAeQ4IiY+JXQnGsS8e5Gr2cZRb
        Y6Ya19GrjMY1wv8fc+uU9kXp7TbHpl3mSQxERG4+wqosN3+IUaPHdnWGP11idOQB
        I0HsJ7PTRk9quFjx1ppkVITZN07+OdGBIzLK6SyDjy49IfL6DVZUH/Oc99IiXg6E
        NDN2UecnnjDEmcvQh2UjGSQ+0NHe36ttQKEnK58GvcSj2reUEaVKLRvPcrzT9o7c
        ugxcbkBGB3VfqSgfun8urekGEHx+vTNwu8rufBkAbQYdYCPBD3AGqSg+Kgi7i/gX
        cwIDAQAB
        -----END PUBLIC KEY-----
    owner: "root:root"
    permissions: '0644'
  - path: "/etc/cvmfs/default.local"
    content: |
        CVMFS_QUOTA_LIMIT='32140'
        CVMFS_HTTP_PROXY='http://ca-proxy.cern.ch:3128'
        CVMFS_CACHE_BASE='/var/lib/cvmfs'
        CVMFS_FORCE_SIGNING='yes'
        CVMFS_REPOSITORIES='ilc.desy.de,geant4.cern.ch'
        CVMFS_SEND_INFO_HEADER=no
    owner: "root:root"
    permissions: '0644'
  - path: "/etc/cvmfs/domain.d/desy.de.conf"
    content: |
        CVMFS_SERVER_URL='http://grid-cvmfs-one.desy.de:8000/cvmfs/@fqrn@;http://cvmfs-stratum-one.cern.ch:8000/cvmfs/@fqrn@;http://cvmfs-egi.gridpp.rl.ac.uk:8000/cvmfs/@fqrn@'
        CVMFS_KEYS_DIR=/etc/cvmfs/keys
    owner: "root:root"
    permissions: '0644'

# Create the needed messages
# Plus an addendum to /etc/profile in order to prepare the session
write_files:
  - path: "/root/post-install.sh"
    content: |
        # Adding the users in the docker group
        # And forcing to use /bin/bash shells
        for _USER in `grep "/afs/cern.ch/user/" /etc/passwd|cut -d: -f1`;
        do
           usermod -aG docker ${_USER};
           usermod -aG analyser ${_USER};
           usermod --shell /bin/bash ${_USER}
        done
    owner: "root:root"
    permissions: "0700"
  - path: "/tmp/profile_addendum"
    content: |
        # CREATED from user-data
        # -----------------------
        # Check if there is a KERBEROS ticket present
        klist -s
        if [[ $? -ne 0 ]];
        then
            echo "[CONFIG] Not kerberos ticket present (to activate your AFS area)"
            echo "[CONFIG] Creating ticket"
            echo "kinit ${USER}@CERN.CH"
            kinit ${USER}@CERN.CH
            echo "[CONFIG] AFS area activated"
        fi

        # Export some needed variables
        export ID
        export GROUP=${GROUPS[0]}
        
        # The alias to run the analysis container
        alias docker-analysis="cd /sw/repos/dockerfiles-eutelescope && docker-compose run --rm analysis"
        
        # -- The analysis directory
        if [[ $EUID -ne 0 ]];
        then
            export POOL_DATA=/eos/cms/store/group/dpg_tracker_upgrade/BeamTestTelescope
            export TB2017CERN=${POOL_DATA}/20170518-CERN_SPS-H6A
            export TB2017DESY11=${POOL_DATA}/20171030-DESY-TB21
            export TB2017DESY12=${POOL_DATA}/20171213-DESY-TB21
            export TB2018CERN06=${POOL_DATA}/20180613-CERN_SPS-H6B
            export TB2018CERN07=${POOL_DATA}/20180724-CERN_SPS-H6B
            export TB2018CERN08=${POOL_DATA}/20180829-CERN_SPS-H2
            export TB2018CERN1003=${POOL_DATA}/20181003-CERN_SPS-H6B
            export TB2018CERN1024=${POOL_DATA}/20181024-CERN_SPS-H6B
            export DOCKERPATH=/sw/repos/dockerfiles-eutelescope
            cd $HOME
            echo 
            echo '=============================================================='
            echo 'TEST-BEAM EUDET analysis server'
            echo '=============================================================='
            echo 'HOST: '$HOSTNAME
            echo 'USER: '$USER
            echo 'CURRENT DIRECTORY: '$PWD
            echo 'HOME: '$HOME
            echo '++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++'
            echo '* Docker directory:      DOCKERPATH [' $(echo ${DOCKERPATH})']'
            echo '* Test beam data folder: POOL_DATA ['${POOL_DATA}']'
            echo '  Environment variables to access Test Beam data:'
            echo '   | SPS CERN June 2017:     TB2017CERN'
            echo '   | DESY Nov. 2017          TB2017DESY11'
            echo '   | DESY Dec. 2017          TB2017DESY12'
            echo '   | SPS CERN June  2018:    TB2018CERN06'
            echo '   | SPS CERN July  2018:    TB2018CERN07'
            echo '   | SPS CERN Aug-Sept 2018: TB2018CERN08'
            echo '   | SPS CERN Oct03 2018:    TB2018CERN1003'
            echo '   | SPS CERN Oct24 2018:    TB2018CERN1024'
            echo '* Marlin framework reconstruction: Test beam data with' 
            echo '  track reconstruction. Efficiencies and charge maps'
            echo '* Starting the Docker analysis container:'
            echo -e ' \033[1;32m $ docker-analysis\033[1;m'
            echo '=============================================================='
        fi
    owner: "root:root"
    permissions: "0644"
  - path: "/bin/add_analysis_service"
    content: |
        #!/usr/bin/env python
        # Modify the docker-compose in order to include the analysis
        # service, assuming is in the VM
        import sys
        import yaml

        # WARNING!! No error control, assuming the input file
        # exists
        compose_file = sys.argv[1]

        with open(compose_file) as f:
            cl = yaml.load(f)
        # Create the analysis service
        cl['services']['analysis'] = {'depends_on': ['eutelescope'], \
              'image': 'duartej/eutelescope:latest', 'user': '${ID}:${GROUP}', \
              'volumes': ['/var/run/eosd:/var/run/eosd', \
                   '/tmp/krb5cc_${ID}:/tmp/krb5cc_${ID}', '/afs:/afs', \
                   {'read_only': True, 'source': '/eos', 'type': 'bind', 'target': '/eos'}, \
                   {'read_only': True, 'source': '/sw/repos/sps-tb-201806-eutel-cfg', \
                   'type': 'bind', 'target': '/home/eudaquser/sps-tb-201806-eutel-cfg'}, \
                   '/etc/passwd:/etc/passwd'], \
                'environment' : ['KRB5CCNAME=/tmp/krb5cc_${ID}','AFSUSER=${USER}'], \
                'privileged': 'true' \
            }
        # The compose file modified
        with open(compose_file,"w") as f:
            yaml.dump(cl,f,default_flow_style=False)

    owner: "root:root"
    permissions: "0755"

